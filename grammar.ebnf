
(* module scope *)

module = ["pub"] "fn" NAME "(" [ fn_arg { "," fn_arg } ] ")" [fn_ret] "{" {stmt} "}" "\n"
       | "module" NAME "\n"
       | "type" NAME type_decl "\n"

fn_arg = NAME type_Decl
       | NAME;

fn_ret = type_decl
       | "(" type_decl {"," type_decl} ")";

(* Statements *)

stmt = ["mut"] NAME {"," ["mut"] NAME} ":=" expr "\n"
     | "assert" expr "\n"
     | "return" [expr {"," expr}] "\n"
     | stmt_if
     | expr "\n"
     | "\n";

stmt_if = "if" expr "{" {stmt} "}" (stmt_else | "\n")
stmt_else = "else" stmt_if
          | "else" "{" {stmt} "}" "\n";

(* Expressions *)

expr = expr_multiplicative;

expr_multiplicative = expr_additive "*" expr_additive
                    | expr_additive "/" expr_additive
                    | expr_additive "%" expr_additive;

expr_additive = expr_shift "+" expr_shift
              | expr_shift "-" expr_shift;

expr_shift = expr_rational "<<" expr_rational
           | expr_rational ">>" expr_rational;

expr_rational = expr_equality "<=" expr_equality
              | expr_equality "<" expr_equality
              | expr_equality ">=" expr_equality
              | expr_equality ">" expr_equality;

expr_equality = expr_bitwise_and "==" expr_bitwise_and
              | expr_bitwise_and "!=" expr_bitwise_and;

expr_bitwise_and = expr_bitwise_xor "&" expr_bitwise_xor;
expr_bitwise_xor = expr_bitwise_or "^" expr_bitwise_or;
expr_bitwise_or = logical_and "|" logical_and;
logical_and = logical_or "&&" logical_and;
logical_or = expr_literal;

expr_literal = NAME
             | NUMBER;

(* Type declaration *)

type_decl = ["mut"] "map" "[" type_decl "]" type_decl
          | ["mut"] "&" type_decl
          | ["mut"] "?" type_decl
          | ["mut"] "[" "]" type_decl
          | ["mut"] NAME;

(* Helpers *)

NAME = ? regex [a-zA-Z][a-zA-Z0-9_]* ?
NUMBER = ? regex [1-9][0-1]* ?
